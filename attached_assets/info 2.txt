# Enhanced Dashboard UI & Visualization Overhaul Plan

After reviewing your project's codebase, I've prepared a comprehensive plan to transform your bid pricing analytics dashboard. This plan addresses both visual issues and functional enhancements to create a more professional, intuitive, and impactful data experience.

## 1. Visual Design System Overhaul

### A. Professional Color System

Let's replace the current color scheme with a more sophisticated palette:

```python
# Comprehensive color system
COLOR_SYSTEM = {
    # Primary palette
    'PRIMARY': {
        'MAIN': '#2C3E50',       # Dark blue-slate - headers, primary elements
        'LIGHT': '#34495E',      # Lighter slate - secondary elements
        'DARK': '#1A252F',       # Darker slate - footer, emphasis
        'CONTRAST': '#ECF0F1'    # Off-white - text on dark backgrounds
    },
    
    # Accent colors
    'ACCENT': {
        'BLUE': '#3498DB',       # Bright blue - won bids, primary accent
        'ORANGE': '#E67E22',     # Orange - lost bids
        'GREEN': '#2ECC71',      # Green - positive indicators
        'RED': '#E74C3C',        # Red - negative indicators
        'PURPLE': '#9B59B6',     # Purple - predictions
        'YELLOW': '#F1C40F'      # Yellow - warnings, highlights
    },
    
    # Neutral tones
    'NEUTRAL': {
        'WHITE': '#FFFFFF',
        'LIGHTEST': '#F8F9FA',
        'LIGHTER': '#E9ECEF',
        'LIGHT': '#DEE2E6',
        'MEDIUM': '#CED4DA',
        'DARK': '#ADB5BD',
        'DARKER': '#6C757D',
        'DARKEST': '#343A40',
        'BLACK': '#212529'
    },
    
    # Semantic colors (for specific meanings)
    'SEMANTIC': {
        'SUCCESS': '#27AE60',
        'WARNING': '#F39C12',
        'ERROR': '#C0392B',
        'INFO': '#2980B9'
    },
    
    # Chart-specific colors 
    'CHARTS': {
        'WON': '#3498DB',        # Blue
        'LOST': '#E67E22',       # Orange
        'WON_TRANS': 'rgba(52, 152, 219, 0.7)',
        'LOST_TRANS': 'rgba(230, 126, 34, 0.7)',
        'GRADIENT_1': '#2980B9',
        'GRADIENT_2': '#6DD5FA',
        'GRADIENT_3': '#FFFFFF'
    },
    
    # Background colors
    'BACKGROUND': {
        'MAIN': '#F8F9FA',       # Main background
        'CARD': '#FFFFFF',       # Card background
        'DARK': '#2C3E50',       # Dark sections
        'ALT': '#EBF5FB'         # Alternate background
    }
}
```

### B. Typography & Text Styling

```python
# Typography styling
TYPOGRAPHY = {
    'FONT_FAMILY': '"Inter", -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif',
    'HEADING': {
        'H1': {'size': '2rem', 'weight': '700', 'height': '1.2'},
        'H2': {'size': '1.5rem', 'weight': '600', 'height': '1.3'},
        'H3': {'size': '1.17rem', 'weight': '600', 'height': '1.4'},
        'H4': {'size': '1rem', 'weight': '600', 'height': '1.5'}
    },
    'BODY': {
        'LARGE': {'size': '1.1rem', 'weight': '400', 'height': '1.5'},
        'NORMAL': {'size': '1rem', 'weight': '400', 'height': '1.5'},
        'SMALL': {'size': '0.875rem', 'weight': '400', 'height': '1.4'}
    }
}
```

### C. Custom CSS for Streamlit

Create a `style.css` file in a new `assets` directory:

```css
/* style.css */
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');

/* Base Styles */
html, body, [data-testid="stAppViewContainer"] {
    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
}

/* Header Styling */
.stApp header {
    background-color: #2C3E50 !important;
    border-bottom: 1px solid #34495E;
}

/* Sidebar Styling */
[data-testid="stSidebar"] {
    background-color: #F8F9FA;
    border-right: 1px solid #DEE2E6;
}

[data-testid="stSidebar"] .css-1d391kg {
    padding-top: 2rem;
}

/* Metric Styling */
[data-testid="stMetric"] {
    background-color: #FFFFFF;
    border-radius: 0.5rem;
    padding: 1.5rem;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
    transition: transform 0.2s, box-shadow 0.2s;
}

[data-testid="stMetric"]:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
}

[data-testid="stMetricLabel"] {
    font-weight: 600 !important;
    color: #2C3E50 !important;
}

[data-testid="stMetricValue"] {
    font-size: 1.8rem !important;
    font-weight: 700 !important;
    color: #2C3E50 !important;
}

[data-testid="stMetricDelta"] {
    font-size: 0.9rem !important;
    font-weight: 500 !important;
}

/* Button Styling */
.stButton > button {
    background-color: #3498DB;
    color: white;
    border: none;
    border-radius: 0.3rem;
    padding: 0.5rem 1rem;
    font-weight: 500;
    transition: background-color 0.2s;
}

.stButton > button:hover {
    background-color: #2980B9;
}

.stButton > button[kind="secondary"] {
    background-color: #F8F9FA;
    color: #2C3E50;
    border: 1px solid #CED4DA;
}

.stButton > button[kind="secondary"]:hover {
    background-color: #E9ECEF;
}

/* Card-like containers */
.css-card {
    background-color: white;
    border-radius: 0.5rem;
    padding: 1rem;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
}

/* Expander styling */
.streamlit-expanderHeader {
    font-weight: 600;
    color: #2C3E50;
}

/* Tabs styling */
.stTabs [data-baseweb="tab-list"] {
    gap: 2px;
}

.stTabs [data-baseweb="tab"] {
    padding: 0.75rem 1rem;
    border-radius: 0.5rem 0.5rem 0 0;
}

.stTabs [aria-selected="true"] {
    background-color: #3498DB !important;
    color: white !important;
    font-weight: 600;
}

/* DataFrames and tables */
[data-testid="stTable"] {
    border-radius: 0.5rem;
    overflow: hidden;
    border: 1px solid #DEE2E6;
}

.dataframe {
    border-collapse: separate;
    border-spacing: 0;
}

.dataframe th {
    background-color: #F8F9FA;
    padding: 0.75rem !important;
    text-align: left !important;
    font-weight: 600 !important;
    color: #2C3E50 !important;
    border-top: 1px solid #DEE2E6 !important;
    border-bottom: 2px solid #DEE2E6 !important;
}

.dataframe td {
    padding: 0.75rem !important;
    border-bottom: 1px solid #DEE2E6 !important;
}

.dataframe tr:nth-child(even) {
    background-color: #F8F9FA;
}

.dataframe tr:hover {
    background-color: #E9ECEF;
}
```

Inject this CSS into Streamlit:

```python
def load_custom_css():
    """Load custom CSS to override Streamlit defaults."""
    css_path = os.path.join(os.path.dirname(__file__), "assets", "style.css")
    with open(css_path, 'r') as f:
        st.markdown(f'<style>{f.read()}</style>', unsafe_allow_html=True)
```

## 2. Data Visualization Enhancements

### A. Consistent Chart Styling

Create a unified chart styling function:

```python
def apply_chart_styling(fig, title=None, height=500, show_legend=True):
    """Apply consistent styling to all charts."""
    fig.update_layout(
        title=dict(
            text=title if title else fig.layout.title.text,
            font=dict(
                family=TYPOGRAPHY['FONT_FAMILY'],
                size=20, 
                color=COLOR_SYSTEM['PRIMARY']['MAIN']
            ),
            x=0.01,
            xanchor='left',
            y=0.95,
            yanchor='top'
        ),
        legend=dict(
            font=dict(
                family=TYPOGRAPHY['FONT_FAMILY'],
                size=12, 
                color=COLOR_SYSTEM['PRIMARY']['MAIN']
            ),
            bgcolor="rgba(255, 255, 255, 0.8)",
            bordercolor=COLOR_SYSTEM['NEUTRAL']['LIGHT'],
            borderwidth=1,
            orientation="h",
            yanchor="bottom",
            y=1.02,
            xanchor="right",
            x=1
        ) if show_legend else dict(visible=False),
        font=dict(
            family=TYPOGRAPHY['FONT_FAMILY'],
            size=12,
            color=COLOR_SYSTEM['PRIMARY']['MAIN']
        ),
        xaxis=dict(
            title_font=dict(
                family=TYPOGRAPHY['FONT_FAMILY'],
                size=14,
                color=COLOR_SYSTEM['PRIMARY']['MAIN']
            ),
            tickfont=dict(
                family=TYPOGRAPHY['FONT_FAMILY'],
                size=12,
                color=COLOR_SYSTEM['NEUTRAL']['DARKER']
            ),
            gridcolor=COLOR_SYSTEM['NEUTRAL']['LIGHT'],
            zerolinecolor=COLOR_SYSTEM['NEUTRAL']['MEDIUM']
        ),
        yaxis=dict(
            title_font=dict(
                family=TYPOGRAPHY['FONT_FAMILY'],
                size=14,
                color=COLOR_SYSTEM['PRIMARY']['MAIN']
            ),
            tickfont=dict(
                family=TYPOGRAPHY['FONT_FAMILY'],
                size=12,
                color=COLOR_SYSTEM['NEUTRAL']['DARKER']
            ),
            gridcolor=COLOR_SYSTEM['NEUTRAL']['LIGHT'],
            zerolinecolor=COLOR_SYSTEM['NEUTRAL']['MEDIUM']
        ),
        plot_bgcolor=COLOR_SYSTEM['NEUTRAL']['WHITE'],
        paper_bgcolor=COLOR_SYSTEM['NEUTRAL']['WHITE'],
        margin=dict(l=10, r=10, t=50, b=10),
        height=height,
        hovermode="closest",
        hoverlabel=dict(
            bgcolor=COLOR_SYSTEM['NEUTRAL']['WHITE'],
            font_size=12,
            font_family=TYPOGRAPHY['FONT_FAMILY']
        ),
    )
    
    # Add subtle box shadow to chart container
    fig.update_layout(
        shapes=[
            dict(
                type="rect",
                xref="paper",
                yref="paper",
                x0=0,
                y0=0,
                x1=1,
                y1=1,
                line=dict(
                    color=COLOR_SYSTEM['NEUTRAL']['LIGHT'],
                    width=1,
                ),
                fillcolor=COLOR_SYSTEM['NEUTRAL']['WHITE'],
                layer="below"
            )
        ]
    )
    
    return fig
```

### B. Enhanced Annotations System

```python
def add_insights_annotation(fig, text, x_pos, y_pos, width=200):
    """Add an insight annotation to a chart."""
    fig.add_annotation(
        x=x_pos,
        y=y_pos,
        xref="paper",
        yref="paper",
        text=text,
        showarrow=False,
        font=dict(
            family=TYPOGRAPHY['FONT_FAMILY'],
            size=11,
            color=COLOR_SYSTEM['PRIMARY']['MAIN']
        ),
        align="left",
        bgcolor=COLOR_SYSTEM['NEUTRAL']['LIGHTEST'],
        bordercolor=COLOR_SYSTEM['NEUTRAL']['LIGHT'],
        borderwidth=1,
        borderpad=4,
        width=width
    )
    return fig

def add_data_point_annotation(fig, x, y, text, direction="up", color=None):
    """Add an annotation to highlight a specific data point."""
    if color is None:
        color = COLOR_SYSTEM['ACCENT']['BLUE']
        
    arrow_settings = {
        "up": dict(ax=0, ay=-40),
        "down": dict(ax=0, ay=40),
        "left": dict(ax=-40, ay=0),
        "right": dict(ax=40, ay=0)
    }
    
    fig.add_annotation(
        x=x,
        y=y,
        text=text,
        showarrow=True,
        arrowhead=2,
        arrowsize=1,
        arrowcolor=color,
        arrowwidth=2,
        font=dict(
            family=TYPOGRAPHY['FONT_FAMILY'],
            size=11,
            color=COLOR_SYSTEM['PRIMARY']['MAIN']
        ),
        bgcolor=COLOR_SYSTEM['NEUTRAL']['WHITE'],
        bordercolor=color,
        borderwidth=1,
        borderpad=4,
        **arrow_settings[direction]
    )
    return fig
```

### C. Improved Scatter Plot Implementation

```python
def create_enhanced_cpi_vs_ir_scatter(won_data, lost_data):
    """Create an enhanced scatter plot of CPI vs IR with trend lines and annotations."""
    # Create figure
    fig = go.Figure()
    
    # Add Won data with improved styling
    fig.add_trace(go.Scatter(
        x=won_data['IR'], 
        y=won_data['CPI'], 
        mode='markers',
        marker=dict(
            color=COLOR_SYSTEM['CHARTS']['WON'],
            size=10, 
            opacity=0.7,
            line=dict(width=1, color=COLOR_SYSTEM['NEUTRAL']['WHITE']),
            symbol='circle'
        ),
        name="Won Bids",
        hovertemplate='<b>Won Bid</b><br>IR: %{x:.1f}%<br>CPI: $%{y:.2f}<br>LOI: %{customdata[0]:.1f} min<br>Completes: %{customdata[1]}<extra></extra>',
        customdata=won_data[['LOI', 'Completes']]
    ))
    
    # Add Lost data with improved styling
    fig.add_trace(go.Scatter(
        x=lost_data['IR'], 
        y=lost_data['CPI'], 
        mode='markers',
        marker=dict(
            color=COLOR_SYSTEM['CHARTS']['LOST'],
            size=10, 
            opacity=0.7,
            line=dict(width=1, color=COLOR_SYSTEM['NEUTRAL']['WHITE']),
            symbol='circle'
        ),
        name="Lost Bids",
        hovertemplate='<b>Lost Bid</b><br>IR: %{x:.1f}%<br>CPI: $%{y:.2f}<br>LOI: %{customdata[0]:.1f} min<br>Completes: %{customdata[1]}<extra></extra>',
        customdata=lost_data[['LOI', 'Completes']]
    ))
    
    # Add trend lines with enhanced styling
    # Won trend line
    x_range = np.linspace(min(won_data['IR']), max(won_data['IR']), 100)
    coeffs = np.polyfit(won_data['IR'], won_data['CPI'], 1)
    y_trend = np.polyval(coeffs, x_range)
    
    fig.add_trace(go.Scatter(
        x=x_range,
        y=y_trend,
        mode='lines',
        line=dict(
            color=COLOR_SYSTEM['CHARTS']['WON'],
            width=2,
            dash='solid'
        ),
        name='Won Trend',
        hoverinfo='skip'
    ))
    
    # Lost trend line
    x_range = np.linspace(min(lost_data['IR']), max(lost_data['IR']), 100)
    coeffs = np.polyfit(lost_data['IR'], lost_data['CPI'], 1)
    y_trend = np.polyval(coeffs, x_range)
    
    fig.add_trace(go.Scatter(
        x=x_range,
        y=y_trend,
        mode='lines',
        line=dict(
            color=COLOR_SYSTEM['CHARTS']['LOST'],
            width=2,
            dash='solid'
        ),
        name='Lost Trend',
        hoverinfo='skip'
    ))
    
    # Apply consistent styling
    fig = apply_chart_styling(
        fig,
        title="Relationship Between Incidence Rate (IR) and CPI",
        height=600
    )
    
    # Update axis titles with more descriptive labels
    fig.update_layout(
        xaxis_title="Incidence Rate (%) - Percentage of people who qualify for survey",
        yaxis_title="Cost Per Interview ($)",
    )
    
    # Add insights annotations
    fig = add_insights_annotation(
        fig,
        "Lower incidence rates typically require higher CPI due to increased screening effort to find qualified respondents.",
        0.01,
        0.95,
        width=220
    )
    
    # Calculate and annotate the convergence point (if any)
    try:
        # Find where trend lines intersect
        won_coeffs = np.polyfit(won_data['IR'], won_data['CPI'], 1)
        lost_coeffs = np.polyfit(lost_data['IR'], lost_data['CPI'], 1)
        
        # Solve for intersection: m1*x + b1 = m2*x + b2
        # x = (b2 - b1) / (m1 - m2)
        if won_coeffs[0] != lost_coeffs[0]:  # Ensure slopes are different
            intersection_x = (lost_coeffs[1] - won_coeffs[1]) / (won_coeffs[0] - lost_coeffs[0])
            intersection_y = won_coeffs[0] * intersection_x + won_coeffs[1]
            
            # Only annotate if intersection is within realistic IR range
            if 0 <= intersection_x <= 100:
                fig = add_data_point_annotation(
                    fig,
                    intersection_x,
                    intersection_y,
                    f"Trend lines converge at IR={intersection_x:.1f}%<br>suggesting price sensitivity<br>changes at this threshold",
                    direction="up"
                )
    except Exception as e:
        pass  # Skip annotation if calculation fails
    
    # Add median lines
    won_median_cpi = won_data['CPI'].median()
    lost_median_cpi = lost_data['CPI'].median()
    
    fig.add_shape(
        type="line",
        x0=0,
        y0=won_median_cpi,
        x1=100,
        y1=won_median_cpi,
        line=dict(
            color=COLOR_SYSTEM['CHARTS']['WON'],
            width=1,
            dash="dot",
        )
    )
    
    fig.add_shape(
        type="line",
        x0=0,
        y0=lost_median_cpi,
        x1=100,
        y1=lost_median_cpi,
        line=dict(
            color=COLOR_SYSTEM['CHARTS']['LOST'],
            width=1,
            dash="dot",
        )
    )
    
    # Add annotations for median lines
    fig.add_annotation(
        x=5,
        y=won_median_cpi,
        text=f"Won Median: ${won_median_cpi:.2f}",
        showarrow=False,
        font=dict(
            family=TYPOGRAPHY['FONT_FAMILY'],
            size=10,
            color=COLOR_SYSTEM['CHARTS']['WON']
        ),
        bgcolor="rgba(255, 255, 255, 0.8)",
        borderpad=2
    )
    
    fig.add_annotation(
        x=5,
        y=lost_median_cpi,
        text=f"Lost Median: ${lost_median_cpi:.2f}",
        showarrow=False,
        font=dict(
            family=TYPOGRAPHY['FONT_FAMILY'],
            size=10,
            color=COLOR_SYSTEM['CHARTS']['LOST']
        ),
        bgcolor="rgba(255, 255, 255, 0.8)",
        borderpad=2
    )
    
    return fig
```

## 3. Layout & Structure Improvements

### A. Custom Card Component

```python
def render_card(title, content, icon=None, accent_color=None):
    """Render a custom card component with title and content."""
    if accent_color is None:
        accent_color = COLOR_SYSTEM['ACCENT']['BLUE']
    
    card_html = f"""
    <div style="
        background-color: white;
        border-radius: 0.5rem;
        padding: 1.5rem;
        margin-bottom: 1rem;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
        border-top: 4px solid {accent_color};
    ">
        <div style="
            display: flex;
            align-items: center;
            margin-bottom: 1rem;
        ">
            {f'<div style="margin-right: 0.75rem;">{icon}</div>' if icon else ''}
            <h3 style="
                margin: 0;
                color: {COLOR_SYSTEM['PRIMARY']['MAIN']};
                font-family: {TYPOGRAPHY['FONT_FAMILY']};
                font-size: {TYPOGRAPHY['HEADING']['H3']['size']};
                font-weight: {TYPOGRAPHY['HEADING']['H3']['weight']};
            ">{title}</h3>
        </div>
        <div>
            {content}
        </div>
    </div>
    """
    return st.markdown(card_html, unsafe_allow_html=True)
```

### B. Advanced Grid Layout Helper

```python
def grid_layout(num_columns, elements, widths=None, heights=None, gap="1rem"):
    """Create a responsive grid layout with custom column widths.
    
    Args:
        num_columns: Number of columns in the grid
        elements: List of functions that render Streamlit elements
        widths: List of custom widths for each column (CSS values)
        heights: List of custom heights for each row (CSS values)
        gap: Gap between grid items (CSS value)
    """
    if widths is None:
        widths = [f"{100/num_columns}%" for _ in range(num_columns)]
    
    # Create CSS grid
    st.markdown(f"""
    <style>
    .grid-container {{
        display: grid;
        grid-template-columns: {" ".join(widths)};
        {f"grid-template-rows: {' '.join(heights)};" if heights else ""}
        gap: {gap};
        padding: 0.5rem 0;
    }}
    .grid-item {{
        background-color: white;
        border-radius: 0.5rem;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
        padding: 1rem;
    }}
    </style>
    """, unsafe_allow_html=True)
    
    # Opening grid container
    st.markdown('<div class="grid-container">', unsafe_allow_html=True)
    
    # Add each element in a grid item
    for element_func in elements:
        st.markdown('<div class="grid-item">', unsafe_allow_html=True)
        element_func()
        st.markdown('</div>', unsafe_allow_html=True)
    
    # Closing grid container
    st.markdown('</div>', unsafe_allow_html=True)
```

### C. Advanced Tabs with Icons

```python
def render_icon_tabs(tabs_config):
    """
    Render custom tabs with icons.
    
    Args:
        tabs_config: List of dicts with keys 'icon', 'label', and 'content_func'
    """
    # Create tab headers
    tabs_html = "<div class='icon-tabs'><div class='tab-header'>"
    
    for i, tab in enumerate(tabs_config):
        active_class = "active" if i == 0 else ""
        tabs_html += f"""
        <button class="tab-button {active_class}" onclick="switchTab({i})">
            <span class="tab-icon">{tab['icon']}</span>
            <span class="tab-label">{tab['label']}</span>
        </button>
        """
    
    tabs_html += "</div><div class='tab-content'>"
    
    # Create tab content containers
    for i, tab in enumerate(tabs_config):
        display_style = "block" if i == 0 else "none"
        tabs_html += f'<div id="tab-{i}" class="tab-pane" style="display: {display_style};">'
        tabs_html += f'<div id="tab-content-{i}"></div>'
        tabs_html += '</div>'
    
    tabs_html += "</div></div>"
    
    # Add JS for tab switching
    tabs_js = """
    <script>
    function switchTab(tabIndex) {
        // Hide all tabs
        const tabPanes = document.querySelectorAll('.tab-pane');
        tabPanes.forEach(pane => pane.style.display = 'none');
        
        // Remove active class from all buttons
        const tabButtons = document.querySelectorAll('.tab-button');
        tabButtons.forEach(button => button.classList.remove('active'));
        
        // Show selected tab
        document.getElementById('tab-' + tabIndex).style.display = 'block';
        
        // Add active class to selected button
        tabButtons[tabIndex].classList.add('active');
    }
    </script>
    """
    
    # Add CSS for tabs
    tabs_css = """
    <style>
    .icon-tabs {
        margin: 1.5rem 0;
    }
    
    .tab-header {
        display: flex;
        border-bottom: 1px solid #DEE2E6;
        margin-bottom: 1rem;
    }
    
    .tab-button {
        display: flex;
        align-items: center;
        padding: 0.75rem 1.25rem;
        background: none;
        border: none;
        border-bottom: 3px solid transparent;
        cursor: pointer;
        transition: all 0.2s;
        color: #6C757D;
        font-weight: 500;
    }
    
    .tab-button:hover {
        color: #3498DB;
        background-color: #F8F9FA;
    }
    
    .tab-button.active {
        color: #3498DB;
        border-bottom: 3px solid #3498DB;
    }
    
    .tab-icon {
        margin-right: 0.5rem;
        font-size: 1.2rem;
    }
    
    .tab-content {
        padding: 0.5rem;
    }
    </style>
    """
    
    # Render the tabs structure
    st.markdown(tabs_css + tabs_html + tabs_js, unsafe_allow_html=True)
    
    # Render content in each tab (hidden initially)
    for i, tab in enumerate(tabs_config):
        with st.container():
            tab_content = tab['content_func']()
            st.markdown(f"""
            <script>
                document.getElementById('tab-content-{i}').innerHTML = `{tab_content}`;
            </script>
            """, unsafe_allow_html=True)
```

## 4. Logo & Branding Enhancement

### A. Modern Logo Design

```python
def render_logo():
    """Render a modern, professional logo for the dashboard."""
    logo_svg = """
    <svg width="200" height="48" viewBox="0 0 200 48" fill="none" xmlns="http://www.w3.org/2000/svg">
        <!-- Logo Background -->
        <rect width="48" height="48" rx="8" fill="#2C3E50"/>
        
        <!-- Logo Graphic -->
        <path d="M14 24C14 18.4772 18.4772 14 24 14C29.5228 14 34 18.4772 34 24C34 29.5228 29.5228 34 24 34" stroke="#3498DB" stroke-width="3" stroke-linecap="round"/>
        <path d="M24 34C18.4772 34 14 29.5228 14 24" stroke="#E67E22" stroke-width="3" stroke-linecap="round"/>
        
        <!-- Chart Bars -->
        <rect x="20" y="20" width="2" height="8" rx="1" fill="#ECF0F1"/>
        <rect x="24" y="18" width="2" height="10" rx="1" fill="#ECF0F1"/>
        <rect x="28" y="22" width="2" height="6" rx="1" fill="#ECF0F1"/>
        
        <!-- Company Name -->
        <text x="56" y="28" font-family="Inter, sans-serif" font-weight="700" font-size="16" fill="#2C3E50">BidPricing</text>
        <text x="56" y="38" font-family="Inter, sans-serif" font-weight="400" font-size="12" fill="#6C757D">Analytics</text>
    </svg>
    """
    
    return st.markdown(logo_svg, unsafe_allow_html=True)
```

### B. Branded Header Component

```python
def render_header(current_page="Dashboard"):
    """Render a branded header with navigation."""
    header_html = f"""
    <header style="
        background-color: white;
        padding: 1rem 2rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 2rem;
        border-radius: 0.5rem;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
    ">
        <div style="display: flex; align-items: center;">
            <svg width="40" height="40" viewBox="0 0 48 48" fill="none" xmlns="http://www.w3.org/2000/svg">
                <!-- Logo Background -->
                <rect width="48" height="48" rx="8" fill="#2C3E50"/>
                
                <!-- Logo Graphic -->
                <path d="M14 24C14 18.4772 18.4772 14 24 14C29.5228 14 34 18.4772 34 24C34 29.5228 29.5228 34 24 34" stroke="#3498DB" stroke-width="3" stroke-linecap="round"/>
                <path d="M24 34C18.4772 34 14 29.5228 14 24" stroke="#E67E22" stroke-width="3" stroke-linecap="round"/>
                
                <!-- Chart Bars -->
                <rect x="20" y="20" width="2" height="8" rx="1" fill="#ECF0F1"/>
                <rect x="24" y="18" width="2" height="10" rx="1" fill="#ECF0F1"/>
                <rect x="28" y="22" width="2" height="6" rx="1" fill="#ECF0F1"/>
            </svg>
            
            <div style="margin-left: 1rem;">
                <h1 style="
                    margin: 0;
                    font-size: 1.5rem;
                    font-weight: 700;
                    color: #2C3E50;
                ">BidPricing Analytics</h1>
                <p style="
                    margin: 0;
                    font-size: 0.9rem;
                    color: #6C757D;
                ">CPI Analysis & Prediction Dashboard</p>
            </div>
        </div>
        
        <div>
            <p style="
                margin: 0;
                font-size: 1rem;
                font-weight: 500;
                color: #6C757D;
            ">
                <span style="color: #3498DB;">●</span> {current_page}
            </p>
        </div>
    </header>
    """
    
    return st.markdown(header_html, unsafe_allow_html=True)
```

## 5. Interactive Elements

### A. Interactive Filters Panel

```python
def render_filters_panel(won_data, lost_data):
    """Render an interactive filters panel for data exploration."""
    with st.expander("📊 Data Filters", expanded=False):
        col1, col2, col3 = st.columns(3)
        
        with col1:
            # IR Range filter
            ir_min = int(min(min(won_data['IR']), min(lost_data['IR'])))
            ir_max = int(max(max(won_data['IR']), max(lost_data['IR'])))
            ir_range = st.slider(
                "Incidence Rate (IR) Range",
                min_value=ir_min,
                max_value=ir_max,
                value=(ir_min, ir_max),
                help="Filter data by Incidence Rate range"
            )
        
        with col2:
            # LOI Range filter
            loi_min = int(min(min(won_data['LOI']), min(lost_data['LOI'])))
            loi_max = int(max(max(won_data['LOI']), max(lost_data['LOI'])))
            loi_range = st.slider(
                "Length of Interview (LOI) Range",
                min_value=loi_min,
                max_value=loi_max,
                value=(loi_min, loi_max),
                help="Filter data by Length of Interview range"
            )
        
        with col3:
            # Sample Size Range filter
            completes_min = int(min(min(won_data['Completes']), min(lost_data['Completes'])))
            completes_max = int(max(max(won_data['Completes']), max(lost_data['Completes'])))
            completes_range = st.slider(
                "Sample Size Range",
                min_value=completes_min,
                max_value=completes_max,
                value=(completes_min, completes_max),
                help="Filter data by Sample Size (Completes) range"
            )
        
        # Apply filters
        filtered_won = won_data[
            (won_data['IR'] >= ir_range[0]) & (won_data['IR'] <= ir_range[1]) &
            (won_data['LOI'] >= loi_range[0]) & (won_data['LOI'] <= loi_range[1]) &
            (won_data['Completes'] >= completes_range[0]) & (won_data['Completes'] <= completes_range[1])
        ]
        
        filtered_lost = lost_data[
            (lost_data['IR'] >= ir_range[0]) & (lost_data['IR'] <= ir_range[1]) &
            (lost_data['LOI'] >= loi_range[0]) & (lost_data['LOI'] <= loi_range[1]) &
            (lost_data['Completes'] >= completes_range[0]) & (lost_data['Completes'] <= completes_range[1])
        ]
        
        # Show filter results summary
        st.markdown(f"""
        <div style="
            display: flex;
            justify-content: space-between;
            margin-top: 1rem;
            padding: 0.5rem;
            background-color: #F8F9FA;
            border-radius: 0.3rem;
            font-size: 0.9rem;
        ">
            <span>Filtered data: <b>{len(filtered_won)}</b> won bids, <b>{len(filtered_lost)}</b> lost bids</span>
            <span>Total: <b>{len(filtered_won) + len(filtered_lost)}</b> of {len(won_data) + len(lost_data)} records ({((len(filtered_won) + len(filtered_lost)) / (len(won_data) + len(lost_data)) * 100):.1f}%)</span>
        </div>
        """, unsafe_allow_html=True)
        
        return filtered_won, filtered_lost
```

### B. Interactive Tooltips

```python
def add_tooltip(element_id, tooltip_text):
    """Add an interactive tooltip to an element."""
    tooltip_js = f"""
    <script>
        // Create tooltip element
        const tooltip = document.createElement('div');
        tooltip.className = 'custom-tooltip';
        tooltip.innerHTML = '{tooltip_text}';
        document.body.appendChild(tooltip);
        
        // Add event listeners to target element
        const element = document.getElementById('{element_id}');
        if (element) {{
            element.addEventListener('mouseover', (e) => {{
                tooltip.style.display = 'block';
                tooltip.style.left = e.pageX + 10 + 'px';
                tooltip.style.top = e.pageY + 10 + 'px';
            }});
            
            element.addEventListener('mousemove', (e) => {{
                tooltip.style.left = e.pageX + 10 + 'px';
                tooltip.style.top = e.pageY + 10 + 'px';
            }});
            
            element.addEventListener('mouseout', () => {{
                tooltip.style.display = 'none';
            }});
        }}
    </script>
    
    <style>
        .custom-tooltip {{
            display: none;
            position: absolute;
            background-color: #2C3E50;
            color: white;
            padding: 0.5rem 0.75rem;
            border-radius: 0.3rem;
            font-size: 0.8rem;
            max-width: 250px;
            z-index: 1000;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
        }}
    </style>
    """
    
    return st.markdown(tooltip_js, unsafe_allow_html=True)
```

### C. Cross-Chart Interaction

```python
def create_linked_charts(won_data, lost_data):
    """Create charts with cross-chart interaction."""
    
    # Create unique chart IDs
    scatter_id = "linked-scatter-chart"
    bar_id = "linked-bar-chart"
    
    # Create data arrays for JavaScript
    won_data_js = won_data[['IR', 'CPI', 'LOI', 'Completes']].to_dict('records')
    lost_data_js = lost_data[['IR', 'CPI', 'LOI', 'Completes']].to_dict('records')
    
    # Create container divs for charts
    st.markdown(f"""
    <div id="{scatter_id}-container" style="height: 500px; margin-bottom: 2rem;"></div>
    <div id="{bar_id}-container" style="height: 400px;"></div>
    """, unsafe_allow_html=True)
    
    # Create JavaScript for linked charts
    charts_js = f"""
    <script src="https://cdn.plot.ly/plotly-2.14.0.min.js"></script>
    <script>
        // Data
        const wonData = {won_data_js};
        const lostData = {lost_data_js};
        
        // Extract arrays for plotting
        const wonIR = wonData.map(d => d.IR);
        const wonCPI = wonData.map(d => d.CPI);
        const wonLOI = wonData.map(d => d.LOI);
        const wonCompletes = wonData.map(d => d.Completes);
        
        const lostIR = lostData.map(d => d.IR);
        const lostCPI = lostData.map(d => d.CPI);
        const lostLOI = lostData.map(d => d.LOI);
        const lostCompletes = lostData.map(d => d.Completes);
        
        // Function to create IR bins
        function createIRBins(irValues) {{
            const bins = [];
            for (let i = 0; i < 100; i += 10) {{
                bins.push(`${i}-${i+10}`);
            }}
            return bins;
        }}
        
        // Function to group data by IR bins
        function groupByIRBin(irValues, cpiValues) {{
            const bins = createIRBins();
            const result = bins.map(bin => {{
                const [min, max] = bin.split('-').map(Number);
                const indices = irValues.map((ir, idx) => ir >= min && ir < max ? idx : -1).filter(idx => idx !== -1);
                const cpiInBin = indices.map(idx => cpiValues[idx]);
                return {{
                    bin,
                    avg: cpiInBin.length > 0 ? cpiInBin.reduce((a, b) => a + b, 0) / cpiInBin.length : 0,
                    count: cpiInBin.length
                }};
            }});
            return result;
        }}
        
        // Create scatter plot
        const scatterTrace1 = {{
            x: wonIR,
            y: wonCPI,
            mode: 'markers',
            type: 'scatter',
            name: 'Won Bids',
            marker: {{
                color: '{COLOR_SYSTEM['CHARTS']['WON']}',
                size: 10,
                opacity: 0.7
            }},
            hovertemplate: '<b>Won Bid</b><br>IR: %{{x:.1f}}%<br>CPI: $%{{y:.2f}}<br>LOI: %{{text}} min<extra></extra>',
            text: wonLOI
        }};
        
        const scatterTrace2 = {{
            x: lostIR,
            y: lostCPI,
            mode: 'markers',
            type: 'scatter',
            name: 'Lost Bids',
            marker: {{
                color: '{COLOR_SYSTEM['CHARTS']['LOST']}',
                size: 10,
                opacity: 0.7
            }},
            hovertemplate: '<b>Lost Bid</b><br>IR: %{{x:.1f}}%<br>CPI: $%{{y:.2f}}<br>LOI: %{{text}} min<extra></extra>',
            text: lostLOI
        }};
        
        const scatterLayout = {{
            title: 'CPI vs Incidence Rate (IR)',
            xaxis: {{ title: 'Incidence Rate (%)' }},
            yaxis: {{ title: 'CPI ($)' }},
            hovermode: 'closest',
            legend: {{
                x: 0,
                y: 1.1,
                orientation: 'h'
            }},
            margin: {{ t: 50, l: 60, r: 40, b: 60 }}
        }};
        
        // Group data for bar chart
        const wonGrouped = groupByIRBin(wonIR, wonCPI);
        const lostGrouped = groupByIRBin(lostIR, lostCPI);
        
        // Create bar chart
        const barTrace1 = {{
            x: wonGrouped.map(d => d.bin),
            y: wonGrouped.map(d => d.avg),
            type: 'bar',
            name: 'Won Bids',
            marker: {{
                color: '{COLOR_SYSTEM['CHARTS']['WON']}',
                opacity: 0.7
            }},
            hovertemplate: '<b>Won Bids</b><br>IR Bin: %{{x}}<br>Avg CPI: $%{{y:.2f}}<br>Count: %{{text}}<extra></extra>',
            text: wonGrouped.map(d => d.count)
        }};
        
        const barTrace2 = {{
            x: lostGrouped.map(d => d.bin),
            y: lostGrouped.map(d => d.avg),
            type: 'bar',
            name: 'Lost Bids',
            marker: {{
                color: '{COLOR_SYSTEM['CHARTS']['LOST']}',
                opacity: 0.7
            }},
            hovertemplate: '<b>Lost Bids</b><br>IR Bin: %{{x}}<br>Avg CPI: $%{{y:.2f}}<br>Count: %{{text}}<extra></extra>',
            text: lostGrouped.map(d => d.count)
        }};
        
        const barLayout = {{
            title: 'Average CPI by IR Bin',
            xaxis: {{ title: 'IR Bin' }},
            yaxis: {{ title: 'Average CPI ($)' }},
            barmode: 'group',
            hovermode: 'closest',
            legend: {{
                x: 0,
                y: 1.1,
                orientation: 'h'
            }},
            margin: {{ t: 50, l: 60, r: 40, b: 60 }}
        }};
        
        // Create initial plots
        Plotly.newPlot('{scatter_id}-container', [scatterTrace1, scatterTrace2], scatterLayout);
        Plotly.newPlot('{bar_id}-container', [barTrace1, barTrace2], barLayout);
        
        // Add interaction between charts
        document.getElementById('{scatter_id}-container').on('plotly_click', function(data) {{
            const point = data.points[0];
            const ir = point.x;
            const irBin = Math.floor(ir / 10) * 10 + '-' + (Math.floor(ir / 10) * 10 + 10);
            
            // Highlight the corresponding bar
            const barUpdate = {{
                'marker.opacity': [0.4, 0.4],
                'marker.line.width': [0, 0]
            }};
            
            // Find the index of the clicked bin
            const binIndex = wonGrouped.findIndex(d => d.bin === irBin);
            
            if (binIndex >= 0) {{
                // Highlight the corresponding bars
                barUpdate['marker.opacity'][0] = Array(wonGrouped.length).fill(0.4);
                barUpdate['marker.opacity'][0][binIndex] = 1;
                barUpdate['marker.line.width'][0] = Array(wonGrouped.length).fill(0);
                barUpdate['marker.line.width'][0][binIndex] = 2;
                
                barUpdate['marker.opacity'][1] = Array(lostGrouped.length).fill(0.4);
                barUpdate['marker.opacity'][1][binIndex] = 1;
                barUpdate['marker.line.width'][1] = Array(lostGrouped.length).fill(0);
                barUpdate['marker.line.width'][1][binIndex] = 2;
                
                Plotly.restyle('{bar_id}-container', barUpdate);
            }}
        }});
        
        document.getElementById('{bar_id}-container').on('plotly_click', function(data) {{
            const point = data.points[0];
            const bin = point.x;
            const [minIR, maxIR] = bin.split('-').map(Number);
            
            // Filter scatter plot points
            const newScatterX1 = [];
            const newScatterY1 = [];
            const newScatterText1 = [];
            
            const newScatterX2 = [];
            const newScatterY2 = [];
            const newScatterText2 = [];
            
            // Filter won data
            for (let i = 0; i < wonIR.length; i++) {{
                if (wonIR[i] >= minIR && wonIR[i] < maxIR) {{
                    newScatterX1.push(wonIR[i]);
                    newScatterY1.push(wonCPI[i]);
                    newScatterText1.push(wonLOI[i]);
                }}
            }}
            
            // Filter lost data
            for (let i = 0; i < lostIR.length; i++) {{
                if (lostIR[i] >= minIR && lostIR[i] < maxIR) {{
                    newScatterX2.push(lostIR[i]);
                    newScatterY2.push(lostCPI[i]);
                    newScatterText2.push(lostLOI[i]);
                }}
            }}
            
            // Update scatter plot
            Plotly.update('{scatter_id}-container', {{
                x: [newScatterX1, newScatterX2],
                y: [newScatterY1, newScatterY2],
                text: [newScatterText1, newScatterText2]
            }}, {{
                title: `CPI vs IR (Filtered to IR Bin: ${bin})`
            }});
        }});
        
        // Add reset button
        const resetButton = document.createElement('button');
        resetButton.innerText = 'Reset Filters';
        resetButton.style.margin = '1rem 0';
        resetButton.style.padding = '0.5rem 1rem';
        resetButton.style.backgroundColor = '#3498DB';
        resetButton.style.color = 'white';
        resetButton.style.border = 'none';
        resetButton.style.borderRadius = '0.3rem';
        resetButton.style.cursor = 'pointer';
        
        resetButton.addEventListener('click', function() {{
            // Reset scatter plot
            Plotly.update('{scatter_id}-container', {{
                x: [wonIR, lostIR],
                y: [wonCPI, lostCPI],
                text: [wonLOI, lostLOI]
            }}, {{
                title: 'CPI vs Incidence Rate (IR)'
            }});
            
            // Reset bar chart
            Plotly.update('{bar_id}-container', {{
                'marker.opacity': [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]],
                'marker.line.width': [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
            }});
        }});
        
        // Add button to the page
        document.getElementById('{scatter_id}-container').parentNode.insertBefore(resetButton, document.getElementById('{scatter_id}-container').nextSibling);
    </script>
    """
    
    st.markdown(charts_js, unsafe_allow_html=True)
```

## 6. Implementation Strategy

### A. Modular Implementation Approach

1. **Create `assets` folder** for static resources:
   - Add `style.css` for custom styling
   - Create icon files and logo assets

2. **Implement UI core components**:
   - Implement `BidPricingAnalytics/ui_components.py` with shared UI components
   - Add color system and typography definitions

3. **Update visualization functions**:
   - Modify visualization utility files to use the new style system
   - Implement enhanced chart components

4. **Update dashboard layout**:
   - Modify main layout in `main.py`
   - Implement responsive grid system

5. **Add interactivity**:
   - Implement cross-chart interactions
   - Add filter controls

### B. Implementation Priorities

1. **Base styling system** (high priority):
   - Color system
   - Typography
   - Custom CSS

2. **Core visualizations** (high priority):
   - Chart styling function
   - Enhanced scatter plots
   - Key metric displays

3. **Layout improvements** (medium priority):
   - Card components
   - Grid layout system
   - Responsive design

4. **Branding elements** (medium priority):
   - Logo design
   - Header components
   - Custom tab designs

5. **Advanced interactivity** (lower priority):
   - Cross-chart interactions
   - Advanced filtering
   - Tooltips and annotations

### C. Testing Framework

```python
def test_visualization_styling():
    """Test the visualization styling functions."""
    import plotly.graph_objects as go
    import numpy as np
    
    # Create a simple test figure
    x = np.linspace(0, 10, 100)
    y = np.sin(x)
    
    fig = go.Figure()
    fig.add_trace(go.Scatter(x=x, y=y, mode='lines'))
    
    # Apply styling
    styled_fig = apply_chart_styling(fig, title="Test Figure")
    
    # Add test annotation
    styled_fig = add_insights_annotation(
        styled_fig, 
        "This is a test annotation", 
        0.1, 
        0.9
    )
    
    # Display the figure
    styled_fig.show()
    
    return styled_fig
```

## 7. Ready-to-Implement Components

Let's start with implementing the core UI components file to bring all this together:

```python
# BidPricingAnalytics/ui_components.py

import streamlit as st
import os
import pandas as pd
import numpy as np
import plotly.graph_objects as go
from typing import Dict, List, Callable, Optional, Union, Any

# Color System
COLOR_SYSTEM = {
    # Primary palette
    'PRIMARY': {
        'MAIN': '#2C3E50',       # Dark blue-slate - headers, primary elements
        'LIGHT': '#34495E',      # Lighter slate - secondary elements
        'DARK': '#1A252F',       # Darker slate - footer, emphasis
        'CONTRAST': '#ECF0F1'    # Off-white - text on dark backgrounds
    },
    
    # Accent colors
    'ACCENT': {
        'BLUE': '#3498DB',       # Bright blue - won bids, primary accent
        'ORANGE': '#E67E22',     # Orange - lost bids
        'GREEN': '#2ECC71',      # Green - positive indicators
        'RED': '#E74C3C',        # Red - negative indicators
        'PURPLE': '#9B59B6',     # Purple - predictions
        'YELLOW': '#F1C40F'      # Yellow - warnings, highlights
    },
    
    # Neutral tones
    'NEUTRAL': {
        'WHITE': '#FFFFFF',
        'LIGHTEST': '#F8F9FA',
        'LIGHTER': '#E9ECEF',
        'LIGHT': '#DEE2E6',
        'MEDIUM': '#CED4DA',
        'DARK': '#ADB5BD',
        'DARKER': '#6C757D',
        'DARKEST': '#343A40',
        'BLACK': '#212529'
    },
    
    # Semantic colors (for specific meanings)
    'SEMANTIC': {
        'SUCCESS': '#27AE60',
        'WARNING': '#F39C12',
        'ERROR': '#C0392B',
        'INFO': '#2980B9'
    },
    
    # Chart-specific colors 
    'CHARTS': {
        'WON': '#3498DB',        # Blue
        'LOST': '#E67E22',       # Orange
        'WON_TRANS': 'rgba(52, 152, 219, 0.7)',
        'LOST_TRANS': 'rgba(230, 126, 34, 0.7)',
        'GRADIENT_1': '#2980B9',
        'GRADIENT_2': '#6DD5FA',
        'GRADIENT_3': '#FFFFFF'
    },
    
    # Background colors
    'BACKGROUND': {
        'MAIN': '#F8F9FA',       # Main background
        'CARD': '#FFFFFF',       # Card background
        'DARK': '#2C3E50',       # Dark sections
        'ALT': '#EBF5FB'         # Alternate background
    }
}

# Typography
TYPOGRAPHY = {
    'FONT_FAMILY': '"Inter", -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif',
    'HEADING': {
        'H1': {'size': '2rem', 'weight': '700', 'height': '1.2'},
        'H2': {'size': '1.5rem', 'weight': '600', 'height': '1.3'},
        'H3': {'size': '1.17rem', 'weight': '600', 'height': '1.4'},
        'H4': {'size': '1rem', 'weight': '600', 'height': '1.5'}
    },
    'BODY': {
        'LARGE': {'size': '1.1rem', 'weight': '400', 'height': '1.5'},
        'NORMAL': {'size': '1rem', 'weight': '400', 'height': '1.5'},
        'SMALL': {'size': '0.875rem', 'weight': '400', 'height': '1.4'}
    }
}

# UI Components

def load_custom_css():
    """Load custom CSS to override Streamlit defaults."""
    css_path = os.path.join(os.path.dirname(__file__), "assets", "style.css")
    if os.path.exists(css_path):
        with open(css_path, 'r') as f:
            st.markdown(f'<style>{f.read()}</style>', unsafe_allow_html=True)
    else:
        st.warning(f"CSS file not found at {css_path}. Some styles may not be applied correctly.")

def render_logo():
    """Render the BidPricing Analytics logo."""
    logo_svg = """
    <svg width="200" height="48" viewBox="0 0 200 48" fill="none" xmlns="http://www.w3.org/2000/svg">
        <!-- Logo Background -->
        <rect width="48" height="48" rx="8" fill="#2C3E50"/>
        
        <!-- Logo Graphic -->
        <path d="M14 24C14 18.4772 18.4772 14 24 14C29.5228 14 34 18.4772 34 24C34 29.5228 29.5228 34 24 34" stroke="#3498DB" stroke-width="3" stroke-linecap="round"/>
        <path d="M24 34C18.4772 34 14 29.5228 14 24" stroke="#E67E22" stroke-width="3" stroke-linecap="round"/>
        
        <!-- Chart Bars -->
        <rect x="20" y="20" width="2" height="8" rx="1" fill="#ECF0F1"/>
        <rect x="24" y="18" width="2" height="10" rx="1" fill="#ECF0F1"/>
        <rect x="28" y="22" width="2" height="6" rx="1" fill="#ECF0F1"/>
        
        <!-- Company Name -->
        <text x="56" y="28" font-family="Inter, sans-serif" font-weight="700" font-size="16" fill="#2C3E50">BidPricing</text>
        <text x="56" y="38" font-family="Inter, sans-serif" font-weight="400" font-size="12" fill="#6C757D">Analytics</text>
    </svg>
    """
    
    return st.markdown(logo_svg, unsafe_allow_html=True)

def render_header(current_page="Dashboard"):
    """Render a branded header with navigation."""
    header_html = f"""
    <header style="
        background-color: white;
        padding: 1rem 2rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 2rem;
        border-radius: 0.5rem;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
    ">
        <div style="display: flex; align-items: center;">
            <svg width="40" height="40" viewBox="0 0 48 48" fill="none" xmlns="http://www.w3.org/2000/svg">
                <!-- Logo Background -->
                <rect width="48" height="48" rx="8" fill="#2C3E50"/>
                
                <!-- Logo Graphic -->
                <path d="M14 24C14 18.4772 18.4772 14 24 14C29.5228 14 34 18.4772 34 24C34 29.5228 29.5228 34 24 34" stroke="#3498DB" stroke-width="3" stroke-linecap="round"/>
                <path d="M24 34C18.4772 34 14 29.5228 14 24" stroke="#E67E22" stroke-width="3" stroke-linecap="round"/>
                
                <!-- Chart Bars -->
                <rect x="20" y="20" width="2" height="8" rx="1" fill="#ECF0F1"/>
                <rect x="24" y="18" width="2" height="10" rx="1" fill="#ECF0F1"/>
                <rect x="28" y="22" width="2" height="6" rx="1" fill="#ECF0F1"/>
            </svg>
            
            <div style="margin-left: 1rem;">
                <h1 style="
                    margin: 0;
                    font-size: 1.5rem;
                    font-weight: 700;
                    color: #2C3E50;
                    font-family: {TYPOGRAPHY['FONT_FAMILY']};
                ">BidPricing Analytics</h1>
                <p style="
                    margin: 0;
                    font-size: 0.9rem;
                    color: #6C757D;
                    font-family: {TYPOGRAPHY['FONT_FAMILY']};
                ">CPI Analysis & Prediction Dashboard</p>
            </div>
        </div>
        
        <div>
            <p style="
                margin: 0;
                font-size: 1rem;
                font-weight: 500;
                color: #6C757D;
                font-family: {TYPOGRAPHY['FONT_FAMILY']};
            ">
                <span style="color: #3498DB;">●</span> {current_page}
            </p>
        </div>
    </header>
    """
    
    return st.markdown(header_html, unsafe_allow_html=True)

def render_card(title, content, icon=None, accent_color=None):
    """Render a custom card component with title and content."""
    if accent_color is None:
        accent_color = COLOR_SYSTEM['ACCENT']['BLUE']
    
    card_html = f"""
    <div style="
        background-color: white;
        border-radius: 0.5rem;
        padding: 1.5rem;
        margin-bottom: 1rem;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
        border-top: 4px solid {accent_color};
        font-family: {TYPOGRAPHY['FONT_FAMILY']};
    ">
        <div style="
            display: flex;
            align-items: center;
            margin-bottom: 1rem;
        ">
            {f'<div style="margin-right: 0.75rem;">{icon}</div>' if icon else ''}
            <h3 style="
                margin: 0;
                color: {COLOR_SYSTEM['PRIMARY']['MAIN']};
                font-family: {TYPOGRAPHY['FONT_FAMILY']};
                font-size: {TYPOGRAPHY['HEADING']['H3']['size']};
                font-weight: {TYPOGRAPHY['HEADING']['H3']['weight']};
            ">{title}</h3>
        </div>
        <div>
            {content}
        </div>
    </div>
    """
    return st.markdown(card_html, unsafe_allow_html=True)

def apply_chart_styling(fig, title=None, height=500, show_legend=True):
    """Apply consistent styling to all charts."""
    fig.update_layout(
        title=dict(
            text=title if title else fig.layout.title.text,
            font=dict(
                family=TYPOGRAPHY['FONT_FAMILY'],
                size=20, 
                color=COLOR_SYSTEM['PRIMARY']['MAIN']
            ),
            x=0.01,
            xanchor='left',
            y=0.95,
            yanchor='top'
        ),
        legend=dict(
            font=dict(
                family=TYPOGRAPHY['FONT_FAMILY'],
                size=12, 
                color=COLOR_SYSTEM['PRIMARY']['MAIN']
            ),
            bgcolor="rgba(255, 255, 255, 0.8)",
            bordercolor=COLOR_SYSTEM['NEUTRAL']['LIGHT'],
            borderwidth=1,
            orientation="h",
            yanchor="bottom",
            y=1.02,
            xanchor="right",
            x=1
        ) if show_legend else dict(visible=False),
        font=dict(
            family=TYPOGRAPHY['FONT_FAMILY'],
            size=12,
            color=COLOR_SYSTEM['PRIMARY']['MAIN']
        ),
        xaxis=dict(
            title_font=dict(
                family=TYPOGRAPHY['FONT_FAMILY'],
                size=14,
                color=COLOR_SYSTEM['PRIMARY']['MAIN']
            ),
            tickfont=dict(
                family=TYPOGRAPHY['FONT_FAMILY'],
                size=12,
                color=COLOR_SYSTEM['NEUTRAL']['DARKER']
            ),
            gridcolor=COLOR_SYSTEM['NEUTRAL']['LIGHT'],
            zerolinecolor=COLOR_SYSTEM['NEUTRAL']['MEDIUM']
        ),
        yaxis=dict(
            title_font=dict(
                family=TYPOGRAPHY['FONT_FAMILY'],
                size=14,
                color=COLOR_SYSTEM['PRIMARY']['MAIN']
            ),
            tickfont=dict(
                family=TYPOGRAPHY['FONT_FAMILY'],
                size=12,
                color=COLOR_SYSTEM['NEUTRAL']['DARKER']
            ),
            gridcolor=COLOR_SYSTEM['NEUTRAL']['LIGHT'],
            zerolinecolor=COLOR_SYSTEM['NEUTRAL']['MEDIUM']
        ),
        plot_bgcolor=COLOR_SYSTEM['NEUTRAL']['WHITE'],
        paper_bgcolor=COLOR_SYSTEM['NEUTRAL']['WHITE'],
        margin=dict(l=10, r=10, t=50, b=10),
        height=height,
        hovermode="closest",
        hoverlabel=dict(
            bgcolor=COLOR_SYSTEM['NEUTRAL']['WHITE'],
            font_size=12,
            font_family=TYPOGRAPHY['FONT_FAMILY']
        ),
    )
    
    return fig

def add_insights_annotation(fig, text, x_pos, y_pos, width=200):
    """Add an insight annotation to a chart."""
    fig.add_annotation(
        x=x_pos,
        y=y_pos,
        xref="paper",
        yref="paper",
        text=text,
        showarrow=False,
        font=dict(
            family=TYPOGRAPHY['FONT_FAMILY'],
            size=11,
            color=COLOR_SYSTEM['PRIMARY']['MAIN']
        ),
        align="left",
        bgcolor=COLOR_SYSTEM['NEUTRAL']['LIGHTEST'],
        bordercolor=COLOR_SYSTEM['NEUTRAL']['LIGHT'],
        borderwidth=1,
        borderpad=4,
        width=width
    )
    return fig

def metrics_row(metrics_data):
    """
    Display a row of metrics with enhanced styling.
    
    Args:
        metrics_data: List of dicts with keys 'label', 'value', 'delta', 'color'
    """
    cols = st.columns(len(metrics_data))
    
    for i, metric in enumerate(metrics_data):
        with cols[i]:
            delta_color = "normal"
            if "delta_color" in metric:
                delta_color = metric["delta_color"]
                
            st.metric(
                label=metric["label"],
                value=metric["value"],
                delta=metric.get("delta", None),
                delta_color=delta_color
            )

def initialize_ui():
    """Initialize the UI components and styles."""
    # Set page config
    st.set_page_config(
        page_title="BidPricing Analytics",
        page_icon="📊",
        layout="wide",
        initial_sidebar_state="expanded"
    )
    
    # Load custom CSS
    load_custom_css()
    
    # Apply broader app styling
    st.markdown(
        f"""
        <style>
            /* Page background */
            .stApp {{
                background-color: {COLOR_SYSTEM['BACKGROUND']['MAIN']};
            }}
            
            /* Headings */
            h1, h2, h3, h4, h5, h6 {{
                font-family: {TYPOGRAPHY['FONT_FAMILY']};
                color: {COLOR_SYSTEM['PRIMARY']['MAIN']};
            }}
            
            /* Body text */
            p, li, div {{
                font-family: {TYPOGRAPHY['FONT_FAMILY']};
                color: {COLOR_SYSTEM['PRIMARY']['MAIN']};
            }}
            
            /* Cards */
            div[data-testid="stVerticalBlock"] > div {{
                background-color: {COLOR_SYSTEM['BACKGROUND']['CARD']};
                border-radius: 0.5rem;
                padding: 0.5rem;
                margin: 0 0 1rem 0;
            }}
            
            /* Metric cards */
            div[data-testid="metric-container"] {{
                background-color: {COLOR_SYSTEM['BACKGROUND']['CARD']};
                border-radius: 0.5rem;
                padding: 1rem;
                box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
            }}
        </style>
        """,
        unsafe_allow_html=True
    )

# Main function to use in app entry point
def setup_ui():
    """Setup UI components for the app."""
    initialize_ui()
    render_header()
```

Then, let's update the main.py file to use these new components:

```python
# BidPricingAnalytics/main.py (updated)

"""
CPI Analysis & Prediction Dashboard
Main application file that orchestrates the dashboard components.

This application provides a comprehensive analysis of Cost Per Interview (CPI)
for market research projects, including visualization, analysis, and prediction tools.
"""

import streamlit as st
import pandas as pd
import numpy as np
import os
import logging
from typing import Dict, List, Tuple, Any, Optional

# Import configuration
import config

# Import UI components
from ui_components import (
    setup_ui, render_header, render_card, 
    metrics_row, apply_chart_styling,
    COLOR_SYSTEM
)

# Import utility modules
from utils.data_loader import load_data
from utils.data_processor import apply_all_bins, engineer_features, get_data_summary

# Import components
from components.overview import show_overview
from components.analysis import show_analysis
from components.prediction import show_prediction
from components.insights import show_insights

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def main():
    """Main application function to orchestrate the dashboard."""
    # Setup UI components
    setup_ui()
    
    # Add app title and description in sidebar
    st.sidebar.title("CPI Analysis & Prediction")
    
    # Navigation
    st.sidebar.title("Navigation")
    app_mode = st.sidebar.radio(
        "Choose a mode",
        ["Overview", "CPI Analysis", "CPI Prediction", "Insights & Recommendations"]
    )
    
    # Render page header
    render_header(current_page=app_mode)
    
    # Load data
    with st.spinner("Loading data..."):
        try:
            data = load_data()
            won_df = data['won']
            won_df_filtered = data['won_filtered']
            lost_df = data['lost']
            lost_df_filtered = data['lost_filtered']
            combined_df = data['combined']
            combined_df_filtered = data['combined_filtered']
        except Exception as e:
            st.error(f"Error loading data: {str(e)}")
            st.error("Please check that all required data files are in the correct location.")
            st.stop()
    
    # Process data - add bins to all dataframes
    try:
        won_df = apply_all_bins(won_df)
        won_df_filtered = apply_all_bins(won_df_filtered)
        lost_df = apply_all_bins(lost_df)
        lost_df_filtered = apply_all_bins(lost_df_filtered)
        combined_df = apply_all_bins(combined_df)
        combined_df_filtered = apply_all_bins(combined_df_filtered)
    except Exception as e:
        st.error(f"Error processing data: {str(e)}")
        st.stop()
    
    # Add sidebar filters with enhanced styling
    st.sidebar.markdown("---")
    st.sidebar.markdown(f"""
    <div style="
        background-color: {COLOR_SYSTEM['BACKGROUND']['CARD']};
        border-radius: 0.5rem;
        padding: 1rem;
        margin-bottom: 1rem;
        border-left: 4px solid {COLOR_SYSTEM['ACCENT']['BLUE']};
    ">
        <h3 style="margin-top: 0;">Filtering Options</h3>
    </div>
    """, unsafe_allow_html=True)
    
    # Filter for extreme values
    show_filtered = st.sidebar.checkbox(
        "Filter out extreme values (>95th percentile)", 
        value=True,
        help="Remove outliers with very high CPI values to focus on typical cases"
    )
    
    # Choose datasets based on filtering option
    if show_filtered:
        won_data = won_df_filtered
        lost_data = lost_df_filtered
        combined_data = combined_df_filtered
    else:
        won_data = won_df
        lost_data = lost_df
        combined_data = combined_df
    
    # Display metrics in sidebar with enhanced styling
    data_summary = get_data_summary(combined_data)
    
    st.sidebar.markdown("---")
    st.sidebar.markdown(f"""
    <div style="
        background-color: {COLOR_SYSTEM['BACKGROUND']['CARD']};
        border-radius: 0.5rem;
        padding: 1rem;
        margin-bottom: 1rem;
        border-left: 4px solid {COLOR_SYSTEM['ACCENT']['PURPLE']};
    ">
        <h3 style="margin-top: 0;">Data Summary</h3>
    </div>
    """, unsafe_allow_html=True)
    
    metrics_data = []
    
    if 'Won' in data_summary:
        metrics_data.append({
            "label": "Won Bids Avg CPI",
            "value": f"${data_summary['Won']['Avg_CPI']:.2f}"
        })
    
    if 'Lost' in data_summary:
        metrics_data.append({
            "label": "Lost Bids Avg CPI",
            "value": f"${data_summary['Lost']['Avg_CPI']:.2f}"
        })
    
    if 'Won' in data_summary and 'Lost' in data_summary:
        diff = data_summary['Lost']['Avg_CPI'] - data_summary['Won']['Avg_CPI']
        metrics_data.append({
            "label": "CPI Difference",
            "value": f"${diff:.2f}",
            "delta": f"{diff:.2f}"
        })
    
    # Show metrics in sidebar
    for metric in metrics_data:
        st.sidebar.metric(
            label=metric["label"],
            value=metric["value"],
            delta=metric.get("delta", None)
        )
    
    # Add footer with enhanced styling
    st.sidebar.markdown("---")
    st.sidebar.markdown(f"""
    <div style="
        background-color: {COLOR_SYSTEM['BACKGROUND']['CARD']};
        border-radius: 0.5rem;
        padding: 1rem;
        font-size: 0.9rem;
        color: {COLOR_SYSTEM['NEUTRAL']['DARKER']};
    ">
        <p style="margin: 0;">
            This dashboard provides analysis and prediction tools for 
            Cost Per Interview (CPI) pricing in market research projects.
        </p>
        <p style="margin: 0.5rem 0 0 0;">
            <span style="color: {COLOR_SYSTEM['ACCENT']['BLUE']};">●</span> <strong>Data updated:</strong> April 2025
        </p>
    </div>
    """, unsafe_allow_html=True)
    
    # Show selected component based on app_mode
    if app_mode == "Overview":
        show_overview(won_data, lost_data, combined_data)
    
    elif app_mode == "CPI Analysis":
        show_analysis(won_data, lost_data, combined_data)
    
    elif app_mode == "CPI Prediction":
        # Engineer features for the prediction model
        combined_data_engineered = engineer_features(combined_data)
        show_prediction(combined_data_engineered, won_data, lost_data)
    
    elif app_mode == "Insights & Recommendations":
        show_insights(won_data, lost_data, combined_data)

if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        st.error(f"An unexpected error occurred: {str(e)}")
        logger.error(f"Unexpected error in main application: {e}", exc_info=True)
```

## Next Steps & Implementation Plan

To implement this comprehensive UI overhaul and visualization enhancement:

1. **Create Directory Structure**
   - Create an `assets` directory for CSS and graphics
   - Add `style.css` with the provided CSS styles

2. **Create UI Components File**
   - Implement `ui_components.py` with all the shared UI components
   - Include the color system and typography definitions

3. **Update Visualization Functions**
   - Modify each visualization function to use the new styling system
   - Apply consistent styling across all charts

4. **Implement Layout Improvements**
   - Update the page layout in `main.py` to use the new components
   - Add responsive design elements

5. **Add Branding and Logo**
   - Implement the logo rendering function
   - Add the branded header component

6. **Enhance Interactivity**
   - Implement cross-chart interactions and tooltips
   - Add enhanced filtering capabilities

This plan provides a solid foundation for creating a professional, visually appealing, and user-friendly analytics dashboard that will deliver insights more effectively and create a more engaging user experience.